// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(cuid()) 
  clerkUserId    String   @unique            
  email          String   @unique
  name           String?
  imageUrl       String?
  city           String?
  phoneNumber    String?   @unique                     
  isAdmin        Boolean  @default(false)     
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  comments Comment[]
  favorites Favorite[]

  address     Address? @relation(fields: [addressId], references: [id])
  addressId   String?  @unique 
  orders      Order[]  
}


model Address {
  id        String   @id @default(cuid()) 
  city      String
  address  String
  state    String
  zipcode  String
  number   String
  unit     String
  reciving String
  orders    Order[]
  phonenum  String
  user    User?  @relation() 

}


model Product {
  id            String   @id @default(uuid()) 
  name          String
  categoryName  String   
  description   String 
  images        Image[] 
  sizes         Size[]  
  colors        Color[] 
  categories    Category[] @relation("ProductCategories") 
  price         Float
  discountPrice Float? 
  comments Comment[]
  orderItems    OrderItem[] 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}



model Category {
  id   String  @id @default(uuid())
  name String  @unique  
  products Product[] @relation("ProductCategories")
  
}
model Image {
  id        String  @id @default(uuid())
  url       String  
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Size {
  id        String  @id @default(uuid())
  value     String  
  product   Product @relation(fields: [productId], references: [id] ,onDelete: Cascade)
  productId String
  orderItems    OrderItem[]


}

model Color {
  id        String  @id @default(uuid())
  name      String  
  hex       String  
  product   Product @relation(fields: [productId], references: [id] ,onDelete: Cascade)
  productId String
  orderItems    OrderItem[]
}


model Order {
  id            String   @id @default(cuid()) 
  user          User     @relation(fields: [userId], references: [id])
  userId        String  
  address       Address  @relation(fields: [addressId], references: [id])
  addressId     String  
  totalPrice    Float  
  status        OrderStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orderItems    OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid()) 
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String  

  product   Product  @relation(fields: [productId], references: [id])
  productId String  

  size      Size?    @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  sizeId    String?  

  color     Color?   @relation(fields: [colorId], references: [id], onDelete: SetNull)
  colorId   String?  

  quantity  Int      @default(1)
  price     Float  
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

model Comment {
  id        String   @id @default(cuid()) 
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  
  content   String  
  score     Int
  createdAt DateTime @default(now())
}

model Favorite{
  id        String   @id @default(cuid()) 
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  
  prodcutId String
}