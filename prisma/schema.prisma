// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(cuid()) 
  clerkUserId    String   @unique            
  email          String   @unique
  name           String?
  imageUrl       String?
  city           String?
  phoneNumber    String?   @unique                     
  isAdmin        Boolean  @default(false)     
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  address     Address? @relation(fields: [addressId], references: [id])
  addressId   String?  @unique   
}


model Address {
  id        String   @id @default(cuid()) 
  city      String
  address  String
  state    String
  zipcode  String
  number   String
  unit     String
  reciving String
  phonenum  String
  user    User?  @relation() 

}


model Product {
  id            String   @id @default(uuid()) 
  name          String
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String
  images        Image[] 
  sizes         Size[]  
  colors        Color[]  
  price         Float
  discountPrice Float?  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Image {
  id        String  @id @default(uuid())
  url       String  
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Size {
  id        String  @id @default(uuid())
  value     String  
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Color {
  id        String  @id @default(uuid())
  name      String  
  hex       String  
  product   Product @relation(fields: [productId], references: [id])
  productId String
}
